# SPDX-License-Identifier: MIT

[build-system]
# never uppercap requirements unless we have evidence it won't work https://iscinumpy.dev/post/bound-version-constraints/ 
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project]  # beware if using setuptools: setup.py still gets executed, and even if pyproject.toml fields take precedence, if there is any code error in setup.py, building will fail!
name = "fdict"
version = "0.9.1"  # see PEP 440 https://peps.python.org/pep-0440/#pre-releases and https://packaging.python.org/en/latest/guides/single-sourcing-package-version/
description = "Just like dict() but for out-of-core big data computing of recursive data structures in Python!"
authors = [
    {name = "Stephen Karl Larroque", email = "lrq3000@gmail.com"},
    ]
maintainers = [
    {name = "Stephen Karl Larroque", email = "lrq3000@gmail.com"},
    ]
requires-python = ">=3.7"
license = {text = "MIT License"} # { file = "LICENSE" }
keywords = ["dict", "file", "disk", "out-of-core", "bigdata", "memory", "ram", "vram", "recursive", "data structure", "big data"]
classifiers = [
    'Development Status :: 4 - Beta',
    'License :: OSI Approved :: MIT License',
    'Environment :: Console',
    'Operating System :: MacOS :: MacOS X',
    'Operating System :: Microsoft :: Windows',
    'Operating System :: POSIX',
    'Operating System :: POSIX :: Linux',
    'Operating System :: POSIX :: BSD',
    'Operating System :: POSIX :: BSD :: FreeBSD',
    'Operating System :: POSIX :: SunOS/Solaris',
    'Intended Audience :: Developers',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.7',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Programming Language :: Python :: Implementation :: PyPy',
    'Topic :: Software Development :: Libraries',
    'Topic :: Software Development :: Libraries :: Python Modules',
    'Topic :: Utilities',
]
dependencies = [
]

[project.urls]
Homepage = "https://github.com/lrq3000/fdict"
Documentation = "https://github.com/lrq3000/fdict/blob/master/README.rst"
"Source" = "https://github.com/lrq3000/fdict"
Tracker = "https://github.com/lrq3000/fdict"
Download = "https://github.com/lrq3000/fdict/releases"
#Changelog = "https://url/changelog"

[project.optional-dependencies]
test = [  # minimum dependencies to run tests
    "pytest",
    "pytest-cov",
]
testmeta = [  # dependencies to test meta-data
    "build",
    "twine",
    "validate-pyproject",
]

[project.readme]
file = "README.rst"
content-type = "text/x-rst"

#[tool.setuptools]
#package-dir = {"" = "src"}

[tool.setuptools.packages.find]
# IMPORTANT: systematically delete `src/<project.name>.egg-info` folder before rebuilding, otherwise the list of included files will not get updated (it's in `SOURCES.txt` file in this folder)
where = ["src"]
include = ["fdict*"]
#namespaces = true  # already the default

[tool.setuptools.package-data]
# Check the <mypkg>.egg-info/SOURCES.txt file generated after a `build` or `pip install` to check if the following files are correctly included in the sdist.
# Check also the list of files included by default: https://packaging.python.org/en/latest/guides/using-manifest-in/
"*" = [
    "LICENSE*",
    "README*",
]

[tool.pytest.ini_options]
addopts = [
    "--import-mode=importlib",
    "-ra",
    "--strict-markers",
]
xfail_strict = true
testpaths = "tests"  # default path to look for tests if nothing is specified in commandline, make sure the test files are named "test_xxxx.py" and not "tests_xxx" plural or any other pattern, otherwise you have to specify how the test files are named too, since pytest makes some specific assumptions (and they are different from nosetests, which assumed files named with the plural "tests_xxxx").
filterwarnings = [
    "once::Warning",
]
required_plugins = "pytest-cov"

[tool.coverage.run]
branch = true
relative_files = true
include = [
    "*/fdict.py",
    ]

[tool.coverage.paths]
source = ["src"]

[tool.coverage.report]  # Beware: you need to delete .coveragerc if you have one, otherwise .coveragerc will take precedence!
show_missing = true
include = [
    "*/fdict.py",
]
omit = [
    "*/python?.?/*",
    "*/site-packages/nose/*",
    "*/opt/python/pypy*",
    "*/tests/*",
]
exclude_lines = [
    # a more strict default pragma
    "\\# pragma: no cover\\b",

    # allow defensive code
    "^\\s*raise AssertionError\\b",
    "^\\s*raise NotImplementedError\\b",
    "^\\s*return NotImplemented\\b",
    "^\\s*raise$",

    # typing-related code
    "^if (False|TYPE_CHECKING):",
    ": \\.\\.\\.(\\s*#.*)?$",
    "^ +\\.\\.\\.$",
    "-> ['\"]?NoReturn['\"]?:",
]
